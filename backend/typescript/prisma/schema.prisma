generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model test {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model user {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  authId                    String
  email                     String
  firstName                 String
  lastName                  String
  phoneNumber               String
  emergencyFirstName        String
  emergencyLastName         String
  emergencyPhoneNumber      String
  role                      Role
  isAccepted                Status
  createdAt                 String?
  assignedServiceRequestIds String[]         @db.ObjectId // For volunteers
  assignedServiceRequests   serviceRequest[] @relation(name: "assignee", fields: [assignedServiceRequestIds], references: [id])
  requestedServiceRequests  serviceRequest[] @relation(name: "requester") // For admins
}

model serviceRequest {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  requestName        String
  requesterId        String             @db.ObjectId
  requester          user               @relation(name: "requester", fields: [requesterId], references: [id]) // Admin requester
  assigneeIds        String[]           @db.ObjectId
  assignees          user[]             @relation(name: "assignee", fields: [assigneeIds], references: [id]) // Volunteers
  location           String
  shiftTime          DateTime?
  shiftEndTime       DateTime?
  description        String?
  currentEmail       String?
  inviteEmails       String[]
  meal               String?
  cookingMethod      CookingMethod?
  frequency          Frequency?
  requestType        ServiceRequestType
  createdAt          String?
  pickUpLocation     String?
  dropOffLocation    String?
  numberOfVolunteers Int?
}

model platformSignUp {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  firstName String
  lastName  String
  status    Status
  createdAt String?
  note      String?
}

model notification {
  id                      String  @id @default(auto()) @map("_id") @db.ObjectId
  assigneeId              String
  requesterId               String
  notificationTitle       String?
  notificationDescription String?
  date                    String
  checked                 Boolean?
  type                    NotificationType
}

enum Role {
  VOLUNTEER
  ADMIN
}

enum ServiceRequestType {
  SITE
  KITCHEN
  DELIVERY
}

enum CookingMethod {
  BAKE
  BOIL
  FRY
  GRILL
  ROAST
  STEAM
}

enum Frequency {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  INVITE
  CANCELLED
  PLATFORM
}
